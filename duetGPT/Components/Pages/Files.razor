@page "/files"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using duetGPT.Data
@using duetGPT.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking;
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize] 

<h3>Files</h3>

<p>Total number of documents: @Documents.Count</p>
<div>
    <table class="table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>File Name</th>
                <th>File Size (bytes)</th>
                <th>Upload Date</th>
                <th>Content Type</th>
                <th>General</th>
                <th>Owner</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var document in Documents)
            {
                <tr>
                    <td>
                        <button class="btn btn-danger" @onclick="() => Delete_Click(document)">Delete</button>
                    </td>
                    <td>@document.FileName</td>
                    <td>@document.FileSize</td>
                    <td>@document.UploadedAt</td>
                    <td>@document.ContentType</td>
                    <td>@document.General</td>
                    <td>@document.OwnerName</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private IList<DocumentViewModel> Documents { get; set; } = new List<DocumentViewModel>();
    private bool isDeleteConfirmationVisible = false;
    private int recordIdToDelete;
    private int counter = 0;

    async Task Delete_Click(DocumentViewModel dataItem)
    {
        var document = await DbContext.Documents.FindAsync(dataItem.Id);
        if (document != null)
        {
            DbContext.Documents.Remove(document);
            await DbContext.SaveChangesAsync();
            Documents.Remove(dataItem);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (currentUser != null)
        {
            var documents = await DbContext.Documents
                .Include(d => d.Owner)
                .Where(d => d.OwnerId == currentUser)
                .ToListAsync();

            Documents = documents.Select(d => new DocumentViewModel
                {
                    Id = d.Id,
                    FileName = d.FileName,
                    FileSize = d.Content.Length,
                    UploadedAt = d.UploadedAt,
                    ContentType = d.ContentType,
                    General = d.General,
                    OwnerName = d.Owner?.UserName ?? "Unknown"
                }).ToList();
        }
    }

    private class DocumentViewModel
    {
        public int Id { get; set; }
        public required string FileName { get; set; }
        public long FileSize { get; set; }
        public DateTime UploadedAt { get; set; }
        public required string ContentType { get; set; }
        public bool General { get; set; }
        public string? OwnerName { get; set; }
    }
}
