@page "/files"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using duetGPT.Data
@using duetGPT.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking;
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize] 

<h3>Files</h3>

<p>Total number of documents: @Documents.Count</p>
<DxGrid Data="@Documents" ShowFilterRow="true" ShowPager="true" PageSize="10" DataItemDeleting="OnDataItemDeleting">
    <Columns>
        <DxGridCommandColumn EditButtonVisible="false" Width="160px" />
        <DxGridDataColumn FieldName="FileName" Caption="File Name" />
        <DxGridDataColumn FieldName="FileSize" Caption="File Size (bytes)" />
        <DxGridDataColumn FieldName="UploadedAt" Caption="Upload Date" />
        <DxGridDataColumn FieldName="ContentType" Caption="Content Type" />
        <DxGridDataColumn FieldName="General" Caption="General" />
        <DxGridDataColumn FieldName="OwnerName" Caption="Owner" />
    </Columns>
</DxGrid>

@code {
    private IList<DocumentViewModel> Documents { get; set; } = new List<DocumentViewModel>();
    private bool isDeleteConfirmationVisible = false;
    private int recordIdToDelete;
    private int counter = 0;

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var x = (DocumentViewModel)e.DataItem;
        var document = await DbContext.Documents.FindAsync(x.Id);
        if (document != null)
        {
            DbContext.Documents.Remove(document);
            await DbContext.SaveChangesAsync();
            await LoadDocumentsAsync(); // Refresh the grid data
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentsAsync();
    }

    private async Task LoadDocumentsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (currentUser != null)
        {
            var documents = await DbContext.Documents
                .Include(d => d.Owner)
                .Where(d => d.OwnerId == currentUser)
                .ToListAsync();

            Documents = documents.Select(d => new DocumentViewModel
                {
                    Id = d.Id,
                    FileName = d.FileName,
                    FileSize = d.Content.Length,
                    UploadedAt = d.UploadedAt,
                    ContentType = d.ContentType,
                    General = d.General,
                    OwnerName = d.Owner?.UserName ?? "Unknown"
                }).ToList();
        }
    }

    private class DocumentViewModel
    {
        public int Id { get; set; }
        public required string FileName { get; set; }
        public long FileSize { get; set; }
        public DateTime UploadedAt { get; set; }
        public required string ContentType { get; set; }
        public bool General { get; set; }
        public string? OwnerName { get; set; }
    }
}
