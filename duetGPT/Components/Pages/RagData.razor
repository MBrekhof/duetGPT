@page "/ragdata"
@using duetGPT.Data
@using DevExpress.Blazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@attribute [Authorize]

<h3>RAG Data Management</h3>

<div class="mb-3">
    <DxButton Text="New RAG Data" IconCssClass="oi oi-plus" Click="@(() => ShowEditPopup(null))" />
</div>

<DxGrid Data="@GridDataSource"
        ShowFilterRow="true"
        ShowPager="true"
        PageSize="20"
        KeyFieldName="ragdataid">
    <Columns>
        <DxGridDataColumn FieldName="ragdataid" Caption="ID" Width="80px" />
        <DxGridDataColumn FieldName="ragcontent" Caption="Content" Width="400px" />
        <DxGridDataColumn FieldName="tokens" Caption="Tokens" Width="100px" />
        <DxGridDataColumn Width="120px" Caption="Actions">
            <CellDisplayTemplate>
                @{
                    var knowLedgeData = (context.DataItem as Knowledge);
                    <DxButton Text="Edit" IconCssClass="oi oi-pencil" Click="@(() => ShowEditPopup(knowLedgeData))" RenderStyle="ButtonRenderStyle.Secondary" />
                    <DxButton Text="Delete" IconCssClass="oi oi-trash" Click="@(() => DeleteRagData(knowLedgeData.ragdataid))" RenderStyle="ButtonRenderStyle.Danger" />
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@PopupVisible" HeaderText="@PopupTitle" Width="600px">
    <Content>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Content</label>
                 <DxMemo @bind-Text="@KnowledgeData.ragcontent" Rows="5" Width="100%" />
             </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Tokens</label>
                 <DxSpinEdit @bind-Value="@KnowledgeData.tokens" />
             </div>
        </div>
        <div class="row">
            <div class="col">
                <DxButton Text="Save" Click="@SaveKnowledgeData" RenderStyle="ButtonRenderStyle.Primary" />
                <DxButton Text="Cancel" Click="@(() => PopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
            </div>
        </div>
    </Content>
</DxPopup>

@code {
    private List<Knowledge> GridDataSource { get; set; } = new();
    private bool PopupVisible { get; set; }
    private string PopupTitle => KnowledgeData?.ragdataid == 0 ? "New RAG Data" : "Edit Knowledge Data";
    private Knowledge KnowledgeData { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            GridDataSource = await Context.Set<Knowledge>().ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching RAG data: {ex.Message}");
        }
    }

    private void ShowEditPopup(Knowledge? knowLedge)
    {
        KnowledgeData = knowLedge != null ? new Knowledge
        {
            ragdataid = knowLedge.ragdataid,
            ragcontent = knowLedge.ragcontent,
            tokens = knowLedge.tokens,
            vectordatastring = knowLedge.vectordatastring
        } : new Knowledge();
        PopupVisible = true;
    }

    private async Task SaveKnowledgeData()
    {
        try
        {
            if (KnowledgeData.ragdataid == 0)
            {
                Context.Add(KnowledgeData);
            }
            else
            {
                var existingItem = await Context.Set<Knowledge>().FindAsync(KnowledgeData.ragdataid);
                if (existingItem != null)
                {
                    existingItem.ragcontent = KnowledgeData.ragcontent;
                    existingItem.tokens = KnowledgeData.tokens;
                    // Explicitly not updating vectordatastring as per requirements
                    Context.Update(existingItem);
                }
            }
            await Context.SaveChangesAsync();
            await LoadData();
            PopupVisible = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving RAG data: {ex.Message}");
        }
    }

    private async Task DeleteRagData(int ragDataId)
    {
        try
        {
            var knowLedgeData = await Context.Set<Knowledge>().FindAsync(ragDataId);
            if (knowLedgeData != null)
            {
                Context.Remove(knowLedgeData);
                await Context.SaveChangesAsync();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting RAG data: {ex.Message}");
        }
    }
}
