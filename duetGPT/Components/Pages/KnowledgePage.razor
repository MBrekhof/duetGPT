@page "/knowledge"
@using duetGPT.Data
@using DevExpress.Blazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using duetGPT.Services
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@inject OpenAIService OpenAIService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@code {
    private List<Knowledge> GridDataSource { get; set; } = new();
    private bool PopupVisible { get; set; }
    private bool ContentPopupVisible { get; set; }
    private string SelectedContent { get; set; } = "";
    private string PopupTitle => KnowledgeData?.RagDataId == 0 ? "New Knowledge" : "Edit Knowledge";
    private Knowledge KnowledgeData { get; set; } = new();
    private string CurrentUserId { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            GridDataSource = await Context.Set<Knowledge>()
                .Include(k => k.Owner)
                .Where(d => d.OwnerId == CurrentUserId)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching knowledge data: {ex.Message}");
        }
    }

    private void ShowContentPopup(string content)
    {
        SelectedContent = content;
        ContentPopupVisible = true;
    }

    private void ShowEditPopup(Knowledge? knowledge)
    {
        KnowledgeData = knowledge != null ? new Knowledge
        {
            RagDataId = knowledge.RagDataId,
            Title = knowledge.Title,
            RagContent = knowledge.RagContent,
            Tokens = knowledge.Tokens,
            CreationDate = knowledge.CreationDate,
            VectorDataString = knowledge.VectorDataString,
            OwnerId = knowledge.OwnerId
        } : new Knowledge { 
            CreationDate = DateTime.UtcNow,
            OwnerId = CurrentUserId
        };
        PopupVisible = true;
    }

    private async Task SaveKnowledgeData()
    {
        try
        {
            if (KnowledgeData.RagDataId == 0)
            {
                KnowledgeData.OwnerId = CurrentUserId;
                Context.Add(KnowledgeData);
            }
            else
            {
                var existingItem = await Context.Set<Knowledge>().FindAsync(KnowledgeData.RagDataId);
                if (existingItem != null)
                {
                    existingItem.Title = KnowledgeData.Title;
                    existingItem.RagContent = KnowledgeData.RagContent;
                    existingItem.Tokens = KnowledgeData.Tokens;
                    // Explicitly not updating vectordatastring as per requirements
                    Context.Update(existingItem);
                }
            }
            await Context.SaveChangesAsync();
            await LoadData();
            PopupVisible = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving knowledge data: {ex.Message}");
        }
    }

    private async Task DeleteKnowledge(int knowledgeId)
    {
        try
        {
            var knowledge = await Context.Set<Knowledge>().FindAsync(knowledgeId);
            if (knowledge != null)
            {
                Context.Remove(knowledge);
                await Context.SaveChangesAsync();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting knowledge: {ex.Message}");
        }
    }

    private async Task EmbedKnowledge(Knowledge knowledge)
    {
        try
        {
            if (knowledge != null && !string.IsNullOrEmpty(knowledge.RagContent))
            {
                var vector = await OpenAIService.GetVectorDataAsync(knowledge.RagContent);
                var existingItem = await Context.Set<Knowledge>().FindAsync(knowledge.RagDataId);
                if (existingItem != null)
                {
                    existingItem.VectorDataString = vector;
                    Context.Update(existingItem);
                    await Context.SaveChangesAsync();
                    await LoadData();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error embedding knowledge: {ex.Message}");
        }
    }
}

<h3>Knowledge Management</h3>

<div class="mb-3">
    <DxButton Text="New Knowledge" IconCssClass="oi oi-plus" Click="@(() => ShowEditPopup(null))" />
</div>

<DxGrid Data="@GridDataSource"
        ShowFilterRow="true"
        ShowPager="true"
        PageSize="20"
        KeyFieldName="RagDataId">
    <Columns>
        <DxGridDataColumn FieldName="RagDataId" Caption="ID" Width="80px" />
        <DxGridDataColumn FieldName="Title" Caption="Title" Width="300px" />
        <DxGridDataColumn FieldName="Owner.UserName" Caption="Owner" Width="150px" />
        <DxGridDataColumn FieldName="CreationDate" Caption="Created" Width="200px">
            <CellDisplayTemplate>
                @{
                    var date = (context.DataItem as Knowledge)?.CreationDate;
                    @(date?.ToString("g") ?? "")
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Tokens" Caption="Tokens" Width="100px" />
        <DxGridDataColumn Caption="Embedded" Width="100px">
            <CellDisplayTemplate>
                @{
                    var knowledge = (context.DataItem as Knowledge);
                    var isEmbedded = knowledge?.VectorDataString != null;
                    <span>@(isEmbedded ? "Yes" : "No")</span>
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Width="200px" Caption="Actions">
            <CellDisplayTemplate>
                @{
                    var knowledge = (context.DataItem as Knowledge);
                    if (knowledge != null)
                    {
                        <DxButton Attributes="@(new Dictionary<string, object> {  ["title"] = "Edit" })" IconCssClass="oi oi-pencil" Click="@(() => ShowEditPopup(knowledge))" RenderStyle="ButtonRenderStyle.Secondary" />
                        <DxButton Attributes="@(new Dictionary<string, object> {  ["title"] = "Delete" })" IconCssClass="oi oi-trash" Click="@(() => DeleteKnowledge(knowledge.RagDataId))" RenderStyle="ButtonRenderStyle.Danger" />
                        <DxButton Attributes="@(new Dictionary<string, object> {  ["title"] = "Embed" })" IconCssClass="oi oi-code" Click="@(() => EmbedKnowledge(knowledge))" RenderStyle="ButtonRenderStyle.Primary" />
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@PopupVisible" HeaderText="@PopupTitle" Width="600px">
    <Content>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Title</label>
                <DxTextBox @bind-Text="@KnowledgeData.Title" MaxLength="50" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Content</label>
                <DxMemo @bind-Text="@KnowledgeData.RagContent" Rows="5" Width="100%" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Tokens</label>
                <DxSpinEdit @bind-Value="@KnowledgeData.Tokens" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <DxButton Text="Save" Click="@SaveKnowledgeData" RenderStyle="ButtonRenderStyle.Primary" />
                <DxButton Text="Cancel" Click="@(() => PopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
            </div>
        </div>
    </Content>
</DxPopup>

<DxPopup @bind-Visible="@ContentPopupVisible" HeaderText="Full Content" Width="800px">
    <Content>
        <div style="max-height: 500px; overflow-y: auto;">
            <pre style="white-space: pre-wrap; word-wrap: break-word;">@SelectedContent</pre>
        </div>
        <div class="mt-3">
            <DxButton Text="Close" Click="@(() => ContentPopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
        </div>
    </Content>
</DxPopup>
