@page "/knowledge"
@using duetGPT.Data
@using DevExpress.Blazor
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<h3>Knowledge Management</h3>

<div class="mb-3">
    <DxButton Text="New Knowledge" IconCssClass="oi oi-plus" Click="@(() => ShowEditPopup(null))" />
</div>

<DxGrid Data="@GridDataSource"
        ShowFilterRow="true"
        ShowPager="true"
        PageSize="20"
        KeyFieldName="RagDataId">
    <Columns>
        <DxGridDataColumn FieldName="RagDataId" Caption="ID" Width="80px"></DxGridDataColumn>
        <DxGridDataColumn FieldName="Title" Caption="Title" Width="300px"></DxGridDataColumn>
        <DxGridDataColumn FieldName="Owner.UserName" Caption="Owner" Width="150px"></DxGridDataColumn>
        <DxGridDataColumn FieldName="CreationDate" Caption="Created" Width="200px">
            <CellDisplayTemplate>
                @{
                    var date = (context.DataItem as Knowledge)?.CreationDate;
                    @(date?.ToString("g") ?? "")
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Tokens" Caption="Tokens" Width="100px"></DxGridDataColumn>
        <DxGridDataColumn Caption="Embedded" Width="100px">
            <CellDisplayTemplate>
                @{
                    var knowledge = (context.DataItem as Knowledge);
                    var isEmbedded = knowledge?.VectorDataString != null;
                    <span>@(isEmbedded ? "Yes" : "No")</span>
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Width="200px" Caption="Actions">
            <CellDisplayTemplate>
                @{
                    var knowledge = (context.DataItem as Knowledge);
                    if (knowledge != null)
                    {
                        <DxButton Attributes="@(new Dictionary<string, object> {  ["title"] = "Edit" })" IconCssClass="oi oi-pencil" Click="@(() => ShowEditPopup(knowledge))" RenderStyle="ButtonRenderStyle.Secondary" />
                        <DxButton Attributes="@(new Dictionary<string, object> {  ["title"] = "Delete" })" IconCssClass="oi oi-trash" Click="@(() => DeleteKnowledge(knowledge.RagDataId))" RenderStyle="ButtonRenderStyle.Danger" />
                        <DxButton Attributes="@(new Dictionary<string, object> {  ["title"] = "Embed" })" IconCssClass="oi oi-code" Click="@(() => EmbedKnowledge(knowledge))" RenderStyle="ButtonRenderStyle.Primary" />
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@PopupVisible" HeaderText="@PopupTitle" Width="600px">
    <Content>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Title</label>
                <DxTextBox @bind-Text="@KnowledgeData.Title" MaxLength="50" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Content</label>
                <DxMemo @bind-Text="@KnowledgeData.RagContent" Rows="5" Width="100%" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Tokens</label>
                <DxSpinEdit @bind-Value="@KnowledgeData.Tokens" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <DxButton Text="Save" Click="@SaveKnowledgeData" RenderStyle="ButtonRenderStyle.Primary" />
                <DxButton Text="Cancel" Click="@(() => PopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
            </div>
        </div>
    </Content>
</DxPopup>

<DxPopup @bind-Visible="@ContentPopupVisible" HeaderText="Full Content" Width="800px">
    <Content>
        <div style="max-height: 500px; overflow-y: auto;">
            <pre style="white-space: pre-wrap; word-wrap: break-word;">@SelectedContent</pre>
        </div>
        <div class="mt-3">
            <DxButton Text="Close" Click="@(() => ContentPopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
        </div>
    </Content>
</DxPopup>
