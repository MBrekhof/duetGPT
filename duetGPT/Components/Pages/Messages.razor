@page "/messages"
@using Microsoft.EntityFrameworkCore
@using DevExpress.Blazor
@using duetGPT.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h3>Messages</h3>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (GridDataSource == null)
{
    <div>Loading...</div>
}
else if (!GridDataSource.Any())
{
    <div class="alert alert-info">No messages found. Try starting a new conversation.</div>
}
else
{
    <div class="mb-3">Found @GridDataSource.Count messages</div>
    <DxGrid Data="@GridDataSource" ShowFilterRow="true" ShowPager="true" ShowGroupPanel="true" PageSize="20" KeyFieldName="Id">
        <Columns>
            <DxGridDataColumn FieldName="Id" Caption="ID" Width="80px" />
            <DxGridDataColumn FieldName="Role" Caption="Role" Width="100px" />
            <DxGridDataColumn FieldName="Thread.Title" Caption="Thread" GroupIndex="1" />
            <DxGridDataColumn FieldName="Content" Caption="Content" Width="300px" />
            <DxGridDataColumn FieldName="Created" Caption="Created" GroupIndex="0" Width="150px" DisplayFormat="g" />
            <DxGridDataColumn FieldName="TokenCount" Caption="Tokens" Width="100px" />
            <DxGridDataColumn FieldName="MessageCost" Caption="Cost" Width="100px" DisplayFormat="C" />
        </Columns>
    </DxGrid>
}

@code {
    private List<DuetMessage> GridDataSource { get; set; }
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                ErrorMessage = "User ID not found";
                return;
            }

            GridDataSource = await Context.Messages
                .Include(m => m.Thread)
                .Where(m => m.Thread.UserId == userId)
                .OrderByDescending(m => m.Created)
                .AsNoTracking()
                .ToListAsync();

            foreach (var message in GridDataSource)
            {
                message.Created = message.Created.ToLocalTime();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading messages: {ex.Message}";
        }
    }
}
