@page "/messages"
@using Microsoft.EntityFrameworkCore
@using DevExpress.Blazor
@using duetGPT.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h3>Message Threads</h3>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (GridDataSource == null)
{
    <div>Loading...</div>
}
else if (!GridDataSource.Any())
{
    <div class="alert alert-info">No threads found. Try starting a new conversation.</div>
}
else
{
    <div class="mb-3">Found @GridDataSource.Count threads</div>
    <DxGrid Data="@GridDataSource" ShowFilterRow="true" ShowPager="true" PageSize="20" KeyFieldName="Id">
        <Columns>
            <DxGridDataColumn FieldName="Id" Caption="ID" Width="80px" />
            <DxGridDataColumn FieldName="Title" Caption="Thread" Width="300px">
                <CellDisplayTemplate>
                    @{
                        var thread = (context.DataItem as DuetThread);
                        <div style="cursor: pointer;" @onclick="@(() => ShowThreadMessages(thread))">
                            @thread.Title
                        </div>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="StartTime" Caption="Created" Width="150px" DisplayFormat="g" />
            <DxGridDataColumn FieldName="TotalTokens" Caption="Tokens" Width="100px" />
            <DxGridDataColumn FieldName="Cost" Caption="Cost" Width="100px" DisplayFormat="C" />
            <DxGridDataColumn Width="100px" Caption="Actions">
                <CellDisplayTemplate>
                    @{
                        var thread = (context.DataItem as DuetThread);
                        <DxButton Text="Delete" 
                                 Click="@(() => ShowDeleteConfirmation(thread))"
                                 RenderStyle="ButtonRenderStyle.Danger" />
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>
    </DxGrid>
}

<DxPopup @bind-Visible="@PopupVisible" HeaderText="Thread Messages" Width="800px">
    <Content>
        <div style="max-height: 500px; overflow-y: auto;">
            @if (ThreadMessages != null && ThreadMessages.Any())
            {
                <DxGrid Data="@ThreadMessages" ShowPager="true" PageSize="10" KeyFieldName="Id">
                    <Columns>
                        <DxGridDataColumn FieldName="Id" Caption="ID" Width="80px" />
                        <DxGridDataColumn FieldName="Role" Caption="Role" Width="100px" />
                        <DxGridDataColumn FieldName="Content" Caption="Content" Width="400px" />
                        <DxGridDataColumn FieldName="Created" Caption="Created" Width="150px" DisplayFormat="g" />
                        <DxGridDataColumn FieldName="TokenCount" Caption="Tokens" Width="100px" />
                        <DxGridDataColumn FieldName="MessageCost" Caption="Cost" Width="100px" DisplayFormat="C" />
                    </Columns>
                </DxGrid>
            }
            else
            {
                <div class="alert alert-info">No messages found in this thread.</div>
            }
        </div>
        <div class="mt-3">
            <DxButton Text="Close" Click="@(() => PopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
        </div>
    </Content>
</DxPopup>

<DxPopup @bind-Visible="@DeleteConfirmationVisible" 
         HeaderText="Confirm Delete" 
         Width="400px">
    <Content>
        <div class="mb-3">
            Are you sure you want to delete this thread and all its messages?
        </div>
        <div>
            <DxButton Text="Delete" 
                     Click="@DeleteThreadAsync" 
                     RenderStyle="ButtonRenderStyle.Danger"
                     CssClass="me-2" />
            <DxButton Text="Cancel" 
                     Click="@(() => DeleteConfirmationVisible = false)" 
                     RenderStyle="ButtonRenderStyle.Secondary" />
        </div>
    </Content>
</DxPopup>

@code {
    private List<DuetThread> GridDataSource { get; set; }
    private List<DuetMessage> ThreadMessages { get; set; }
    private string ErrorMessage { get; set; }
    private bool PopupVisible { get; set; }
    private bool DeleteConfirmationVisible { get; set; }
    private DuetThread ThreadToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                ErrorMessage = "User ID not found";
                return;
            }

            GridDataSource = await Context.Threads
                .Where(t => t.UserId == userId)
                .OrderByDescending(t => t.StartTime)
                .AsNoTracking()
                .ToListAsync();

            foreach (var thread in GridDataSource)
            {
                thread.StartTime = thread.StartTime.ToLocalTime();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading threads: {ex.Message}";
        }
    }

    private async Task ShowThreadMessages(DuetThread thread)
    {
        try
        {
            ThreadMessages = await Context.Messages
                .Where(m => m.ThreadId == thread.Id)
                .OrderByDescending(m => m.Id)
                .AsNoTracking()
                .ToListAsync();

            foreach (var message in ThreadMessages)
            {
                message.Created = message.Created.ToLocalTime();
            }

            PopupVisible = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading thread messages: {ex.Message}";
        }
    }

    private void ShowDeleteConfirmation(DuetThread thread)
    {
        ThreadToDelete = thread;
        DeleteConfirmationVisible = true;
    }

    private async Task DeleteThreadAsync()
    {
        try
        {
            if (ThreadToDelete == null) return;

            // Delete associated messages first
            var messages = await Context.Messages
                .Where(m => m.ThreadId == ThreadToDelete.Id)
                .ToListAsync();
            Context.Messages.RemoveRange(messages);

            // Delete the thread
            Context.Threads.Remove(ThreadToDelete);
            await Context.SaveChangesAsync();

            // Remove from grid data source
            GridDataSource.Remove(ThreadToDelete);
            ThreadToDelete = null;
            DeleteConfirmationVisible = false;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting thread: {ex.Message}";
        }
    }
}
