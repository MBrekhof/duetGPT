@page "/prompts"
@using Microsoft.EntityFrameworkCore
@using DevExpress.Blazor
@using duetGPT.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Markdig
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@code {
    private List<Prompt> GridDataSource { get; set; } = new();
    private bool PopupVisible { get; set; }
    private string PopupTitle => CurrentPrompt?.PromptID == 0 ? "New Prompt" : "Edit Prompt";
    private Prompt CurrentPrompt { get; set; } = new();
    private static readonly MarkdownPipeline Pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .Build();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            GridDataSource = await Context.Set<Prompt>().ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching prompts: {ex.Message}");
        }
    }

    private async Task ShowEditPopup(Prompt? prompt)
    {
        if (prompt == null)
        {
            CurrentPrompt = new Prompt();
        }
        else
        {
            // Fetch the prompt directly from the context to ensure it's tracked
            CurrentPrompt = await Context.Set<Prompt>().FindAsync(prompt.PromptID)
                ?? throw new InvalidOperationException($"Prompt with ID {prompt.PromptID} not found");
        }
        PopupVisible = true;
    }

    private async Task SavePrompt()
    {
        try
        {
            if (CurrentPrompt.PromptID == 0)
            {
                Context.Add(CurrentPrompt);
            }
            // No need for explicit Update call since the entity is tracked
            await Context.SaveChangesAsync();
            await LoadData();
            PopupVisible = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving prompt: {ex.Message}");
        }
    }

    private async Task DeletePrompt(int promptId)
    {
        try
        {
            var prompt = await Context.Set<Prompt>().FindAsync(promptId);
            if (prompt != null)
            {
                Context.Remove(prompt);
                await Context.SaveChangesAsync();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting prompt: {ex.Message}");
        }
    }

    private string RenderMarkdown(string markdown)
    {
        var html = Markdown.ToHtml(markdown, Pipeline);
        return $"<div class=\"markdown-content\">{html}</div>";
    }
}

<h3>Prompts</h3>

<div class="mb-3">
    <DxButton Text="New Prompt" IconCssClass="oi oi-plus" Click="@(async () => await ShowEditPopup(null))" />
</div>

<DxGrid Data="@GridDataSource"
        ShowFilterRow="true"
        ShowPager="true"
        PageSize="20"
        KeyFieldName="PromptID">
    <Columns>
        <DxGridDataColumn FieldName="PromptID" Caption="ID" Width="80px" />
        <DxGridDataColumn FieldName="Title" Caption="Title" Width="200px" />
        <DxGridDataColumn FieldName="Name" Caption="Name" Width="150px" />
        <DxGridDataColumn FieldName="Content" Caption="Content" Width="400px">
            <CellDisplayTemplate>
                @{
                    var prompt = (context.DataItem as Prompt);
                    if (prompt?.Content != null)
                    {
                        @((MarkupString)RenderMarkdown(prompt.Content))
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Width="120px" Caption="Actions">
            <CellDisplayTemplate>
                @{
                    var prompt = (context.DataItem as Prompt);
                    if (prompt != null)
                    {
                        <DxButton Text="Edit" IconCssClass="oi oi-pencil" Click="@(async () => await ShowEditPopup(prompt))" RenderStyle="ButtonRenderStyle.Secondary" />
                        <DxButton Text="Delete" IconCssClass="oi oi-trash" Click="@(async () => await DeletePrompt(prompt.PromptID))" RenderStyle="ButtonRenderStyle.Danger" />
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@PopupVisible" HeaderText="@PopupTitle" Width="600px">
    <Content>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Title</label>
                <DxTextBox @bind-Text="@CurrentPrompt.Title" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Name</label>
                <DxTextBox @bind-Text="@CurrentPrompt.Name" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Content</label>
                <DxMemo @bind-Text="@CurrentPrompt.Content" Rows="5" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <DxButton Text="Save" Click="@(async () => await SavePrompt())" RenderStyle="ButtonRenderStyle.Primary" />
                <DxButton Text="Cancel" Click="@(() => PopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
            </div>
        </div>
    </Content>
</DxPopup>

<style>
    /* Add some basic styling for markdown content */
    :deep(.markdown-content) {
        overflow-wrap: break-word;
        word-wrap: break-word;
    }
    :deep(.markdown-content p) {
        margin: 0;
    }
    :deep(.markdown-content code) {
        background-color: #f5f5f5;
        padding: 2px 4px;
        border-radius: 4px;
    }
</style>
