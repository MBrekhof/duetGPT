@page "/prompts"
@using DevExpress.Blazor
@using duetGPT.Data
@rendermode InteractiveServer

<h3>Prompts</h3>

<div class="mb-3">
    <DxButton Text="New Prompt" IconCssClass="oi oi-plus" Click="@(async () => await ShowEditPopup(null))" />
</div>

<DxGrid Data="@GridDataSource"
        ShowFilterRow="true"
        ShowPager="true"
        PageSize="20"
        KeyFieldName="PromptID">
    <Columns>
        <DxGridDataColumn FieldName="PromptID" Caption="ID" Width="40px" />
        <DxGridDataColumn FieldName="Title" Caption="Title" Width="300px" />
        <DxGridDataColumn FieldName="Name" Caption="Name" Width="150px" />
        <DxGridDataColumn FieldName="Content" Caption="Content" Width="650px">
            <CellDisplayTemplate>
                @{
                    var prompt = (context.DataItem as Prompt);
                    if (prompt?.Content != null)
                    {
                        @((MarkupString)RenderMarkdown(prompt.Content))
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Width="80px" Caption="Actions">
            <CellDisplayTemplate>
                @{
                    var prompt = (context.DataItem as Prompt);
                    if (prompt != null)
                    {
                        <DxButton Attributes="@(new Dictionary<string, object> { ["title"] = "Edit" })" IconCssClass="oi oi-pencil" Click="@(async () => await ShowEditPopup(prompt))" RenderStyle="ButtonRenderStyle.Secondary" />
                        <DxButton Attributes="@(new Dictionary<string, object> { ["title"] = "Delete" })" IconCssClass="oi oi-trash" Click="@(async () => await DeletePrompt(prompt.PromptID))" RenderStyle="ButtonRenderStyle.Danger" />
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@PopupVisible" HeaderText="@PopupTitle" Width="600px">
    <Content>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Title</label>
                <DxTextBox @bind-Text="@CurrentPrompt.Title" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Name</label>
                <DxTextBox @bind-Text="@CurrentPrompt.Name" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Content</label>
                <DxMemo @bind-Text="@CurrentPrompt.Content" Rows="5" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <DxButton Text="Save" Click="@(async () => await SavePrompt())" RenderStyle="ButtonRenderStyle.Primary" />
                <DxButton Text="Cancel" Click="@(() => PopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
            </div>
        </div>
    </Content>
</DxPopup>

<style>
    /* Add some basic styling for markdown content */
    :deep(.markdown-content) {
        overflow-wrap: break-word;
        word-wrap: break-word;
    }
    :deep(.markdown-content p) {
        margin: 0;
    }
    :deep(.markdown-content code) {
        background-color: #f5f5f5;
        padding: 2px 4px;
        border-radius: 4px;
    }
</style>
